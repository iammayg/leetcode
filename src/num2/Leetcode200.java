package num2;

import java.util.AbstractMap.SimpleEntry;
import java.util.LinkedList;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;

/**
 * @author mayonggang <mayonggang03@kuaishou.com>
 * Created on 2022-02-14
 */
public class Leetcode200 {

    public static int numIslands(char[][] grid) {
        int res = 0;
        Queue<Map.Entry<Integer, Integer>> queue = new LinkedList<>();
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    res++;
                    queue.add(new SimpleEntry<>(i, j));
                    grid[i][j] = '0';
                    while (!queue.isEmpty()) {
                        Entry<Integer, Integer> cur = queue.remove();
                        int x, y;
                        x = cur.getKey() - 1;
                        y = cur.getValue();
                        if (x >= 0 && grid[x][y] == '1') {
                            queue.add(new SimpleEntry<>(x, y));
                            grid[x][y] = '0';
                        }
                        x = cur.getKey() + 1;
                        if (x < grid.length && grid[x][y] == '1') {
                            queue.add(new SimpleEntry<>(x, y));
                            grid[x][y] = '0';
                        }
                        x = cur.getKey();
                        y = cur.getValue() - 1;
                        if (y >= 0 && grid[x][y] == '1') {
                            queue.add(new SimpleEntry<>(x, y));
                            grid[x][y] = '0';
                        }
                        y = cur.getValue() + 1;
                        if (y < grid[0].length && grid[x][y] == '1') {
                            queue.add(new SimpleEntry<>(x, y));
                            grid[x][y] = '0';
                        }

                    }
                }
            }
        }
        return res;
    }

    public static void main(String[] args) {
        char[][] chars = new char[][] {
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0',
                        '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1',
                        '1', '0'},
                {'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1',
                        '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1',
                        '1', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1',
                        '0', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
                        '1', '1'}};
        //        char[][] chars =
        //                new char[][] {{'1', '1', '1', '0'}, {'1', '0', '0', '1'}, {'1', '0', '1', '1'}, {'0', '1',
        //                '0', '0'}};
        numIslands(chars);

    }


}
